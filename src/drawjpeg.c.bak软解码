#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <jpeglib.h>

#include "drawjpeg.h"

static unsigned short drawrgb565(unsigned int dwColor)
{	
	unsigned short wColor16bpp;
	int iRed= (dwColor >> (16+3)) & 0x1f;
	int iGreen=(dwColor >> (8+2)) & 0x3f;
	int iBlue= (dwColor >> 3) & 0x1f;

	wColor16bpp = (iRed << 11) | (iGreen << 5) | iBlue;

	//printf("red=%x, greed=%x ,blue=%x",iRed,iGreen,iBlue);

	return wColor16bpp;
}

int DrawJpegControl(char* filepathname, int x,int y)
{
	int i = 0,k = 0,row_stride = 0;
	register  unsigned int dwColor;
	unsigned short rgb565;
	FILE * infile;
	unsigned char *buffer,*dstbuffer;
	struct jpeg_decompress_struct cinfo;
	struct jpeg_error_mgr jerr;
  	WinBaseBufInfo *pbufinfo = NULL;
  
	if((access(filepathname,F_OK))==-1)   
    {   
		printf("%s %d file not Exist %s  x=%d  y=%d \n",__FUNCTION__,__LINE__, filepathname,x,y);
		return -1;
    }
	
	pbufinfo = GetWinBaseBufInfo();
	
    if(pbufinfo == NULL || filepathname == NULL)
        return -1;
    
	if ((infile = fopen(filepathname, "rb")) == NULL) 
    {
		printf("%s %d Can not open file %s \n",__FUNCTION__,__LINE__, filepathname);
		return -1;
	}	
    
	cinfo.err = jpeg_std_error(&jerr);
	jpeg_create_decompress(&cinfo);
	
	jpeg_stdio_src(&cinfo, infile);
	
	jpeg_read_header(&cinfo, TRUE);

	cinfo.scale_num=1;
	cinfo.scale_denom=1;

	jpeg_start_decompress(&cinfo);

	//一行的数据长度
	row_stride = cinfo.output_width * cinfo.output_components;
	
	buffer = malloc(row_stride);

	cinfo.output_scanline = 0;
	while (cinfo.output_scanline < cinfo.output_height) 
	{
		//参数1表示的是每次读取的行数
		(void) jpeg_read_scanlines(&cinfo, &buffer, 1);
        
        if(y+cinfo.output_scanline >= pbufinfo->height)
            break;

        dstbuffer = pbufinfo->pdstbuf+(y+cinfo.output_scanline)*pbufinfo->stride+x*2;
        if(x+cinfo.output_width >= pbufinfo->width)
    	{
			for(k=0,i=0; k<pbufinfo->width-x;k++)
			{
				dwColor = (buffer[i]<<16) | (buffer[i+1]<<8) | (buffer[i+2]<<0);
				i += 3;
				rgb565 = drawrgb565(dwColor);
				
		        memcpy(dstbuffer+k*2, &rgb565, 2); 			
			}
		}
        else
    	{
    		for(k=0,i=0; k<cinfo.output_width;k++)
			{
				dwColor = (buffer[i]<<16) | (buffer[i+1]<<8) | (buffer[i+2]<<0);
				i += 3;
				rgb565 = drawrgb565(dwColor);
		        memcpy(dstbuffer+k*2, &rgb565, 2);			
			}
    	}           
	}
    
	//最后:释放资源	
	free(buffer);
	jpeg_finish_decompress(&cinfo);
    
	jpeg_destroy_decompress(&cinfo);
  	fclose(infile);

	return 0;
}


